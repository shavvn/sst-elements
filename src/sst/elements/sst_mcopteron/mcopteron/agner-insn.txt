/* 64- and 128- Bit Instructions */
/*  Instruction;Operands;Operation;Decode Unit;Execution Unit;Base Latency; */
/*              +Memory Latency;Throughput;Category  */
/*  By default, if an instruction has no character to its left, this means */
/*  that there is always a 2-cycle difference between that instruction have */
/*  only xmmister operands and that instruction having a memory operand. */
/*  Any instruction that has a memory operand as its second operand is a */
/*  LOAD. Instructions with an * in front of them means that the operands */
/*  must be inspected before you can tell which        */
/*  execution it will use and, therefore, its latency. */

/* WALEED: notes, I'm making a line for each unique combination of operands */
/*   I'm also removing the memory + latency because that should be taken care of in the model and since */
/*   We are reading a detailed instruction mix, each line of which should hit in exactly one line here */ 
/* also, replaced all CL/.. references with 'reg' and constant '1''s with 'imm'
// all entries with unspecified reg size, replaced to reg8/16/32/64
// finally, entries with unspecified 'mem' size also replaced to mem8/mem16/mem32/mem64

*MOVAPD  xmm,xmm         MOV     single  FADD/FMUL/FSTORE 2  0   2/1  FADD-2
*MOVAPD  xmm,mem         MOV     single  FADD/FMUL/FSTORE 2  0   2/1  FLOAD-2
*MOVAPD  mem,xmm         MOV     double  FMUL&FSTORE      2  0   1/1  FSTORE-2
*MOVAPS  xmm,xmm         MOV     single  FADD/FMUL/FSTORE 3  0   2/1  FADD-2
*MOVAPS  xmm,mem         MOV     single  FADD/FMUL/FSTORE 2  0   2/1  FLOAD-2
*MOVAPS  mem,xmm         MOV     double  FMUL&FSTORE      2  0   1/1  FSTORE-2
*MOVDDUP xmm,xmm         MOV     single  FADD/FMUL 2  0   3/1  FADD-2
*MOVDDUP xmm,mem         MOV     single  FSTORE           2  0   2/1  FLOAD-2
*MOVDDUP mem,xmm         MOV     single  FSTORE           2  0   2/1  FLOAD-2
MOVDQ2Q  mm,xmm          MOV     single  FADD/FMUL/FSTORE 2  0   3/1  FADD-2
*MOVDQA  xmm,xmm         MOV     single  FADD/FMUL/FSTORE 2  0   3/1  FADD-2
*MOVDQA  xmm,mem         MOV     single  FSTORE           2  0   2/1  FLOAD-2
*MOVDQA  mem,xmm         MOV     double  FMUL&FSTORE      2  0   1/1  FSTORE-2
*MOVDQU  xmm,xmm         MOV     single  FADD/FMUL        2  0   3/1  FADD-2
*MOVDQU  mem,xmm         MOV     vector  FSTORE           3  0   1/2  FSTORE-3
*MOVDQU  xmm,mem         MOV     single  FSTORE           2  0   2/1  FLOAD-2

*MOVD    reg32,xmm/mm    MOV     single  FADD              3  0   1/1  FADD-3
*MOVD    xmm,mem         MOV     single  FADD/FMUL/FSTORE  2  0   2/1  FLOAD-2
*MOVD    mem,xmm/mm      MOV     single  FSTORE            2  0   1/1  FSTORE-2
*MOVD    mm,mem          MOV     single  FADD/FMUL/FSTORE  4  0   2/1  FLOAD-4
*MOVD    xmm/mm,reg32    MOV     double  FMUL&ALU          6  0   1/3  ALU-6

*MOVD    xmm/mm,reg64    MOV     double  FMUL&ALU          6  0   1/3  ALU-6
*MOVD    reg64,xmm/mm    MOV     single  FADD              3  0   1/1  FADD-3
*MOVQ    xmm/mm,reg64    MOV     double  FMUL&ALU          6  0   1/3  ALU-6
*MOVQ    reg64,xmm/mm    MOV     single  FADD              3  0   1/1  FADD-3

  
*MOVQ    xmm,xmm         MOV     single  FADD/FMUL/FSTORE 2   0   3/1   FADD-2
*MOVQ    mm,mm           MOV     single  FADD/FMUL/FSTORE 2   0   2/1   FADD-2
*MOVQ    mem,xmm/mm      MOV     single  FSTORE           2   0   1/1   FSTORE-2
*MOVQ    xmm,mem         MOV     single  FSTORE           2   0   2/1   FLOAD-2
*MOVQ    mm,mem          MOV     single  FADD/FMUL/FSTORE 4   0   2/1   FLOAD-4

MOVQ2DQ  xmm,mm          MOV     single  FADD/FMUL 2   0   3/1   FADD-2

*MOVUPS  xmm,xmm         MOV     single  FADD/FMUL/FSTORE 2   0   2/1   FADD-2
*MOVUPS  mem,xmm         MOV     vector  FSTORE           3   0   1/2   FSTORE-3
*MOVUPS  xmm,mem         MOV     single  FADD/FMUL/FSTORE 2   0   2/1   FLOAD-2
*MOVUPD  xmm,xmm         MOV     single  FADD/FMUL/FSTORE 2   0   2/1   FADD-2
*MOVUPD  mem,xmm         MOV     vector  FSTORE           3   0   1/2   FSTORE-3
*MOVUPD  xmm,mem         MOV     single  FADD/FMUL/FSTORE 2   0   2/1   FLOAD-2

CMPPD    xmm,xmm,imm     ADD     single  FADD       2    0    1/1   FADD-2
CMPPD    xmm,mem,imm     ADD     single  FADD       2    0    1/1   FADD-2
CMPPS    xmm,xmm,imm     ADD     single  FADD       2    0    1/1   FADD-2
CMPPS    xmm,mem,imm     ADD     single  FADD       2    0    1/1   FADD-2
CMPSD    xmm,xmm,imm     ADD     single  FADD       2    0    1/1   FADD-2
CMPSD    xmm,mem,imm     ADD     single  FADD       2    0    1/1   FADD-2
CMPSS    xmm,xmm,imm     ADD     single  FADD       2    0    1/1   FADD-2
CMPSS    xmm,mem,imm     ADD     single  FADD       2    0    1/1   FADD-2
MAXPD    xmm,xmm         ADD     single  FADD       2    0    1/1   FADD-2
MAXPD    xmm,mem         ADD     single  FADD       2    0    1/1   FADD-2
MAXPS    xmm,xmm         ADD     single  FADD       2    0    1/1   FADD-2
MAXPS    xmm,mem         ADD     single  FADD       2    0    1/1   FADD-2
MAXSD    xmm,xmm         ADD     single  FADD       2    0    1/1   FADD-2
MAXSD    xmm,mem         ADD     single  FADD       2    0    1/1   FADD-2
MAXSS    xmm,xmm         ADD     single  FADD       2    0    1/1   FADD-2
MAXSS    xmm,mem         ADD     single  FADD       2    0    1/1   FADD-2
MINPD    xmm,xmm         ADD     single  FADD       2    0    1/1   FADD-2
MINPD    xmm,mem         ADD     single  FADD       2    0    1/1   FADD-2
MINPS    xmm,xmm         ADD     single  FADD       2    0    1/1   FADD-2
MINPS    xmm,mem         ADD     single  FADD       2    0    1/1   FADD-2
MINSD    xmm,xmm         ADD     single  FADD       2    0    1/1   FADD-2
MINSD    xmm,mem         ADD     single  FADD       2    0    1/1   FADD-2
MINSS    xmm,xmm         ADD     single  FADD       2    0    1/1   FADD-2
MINSS    xmm,mem         ADD     single  FADD       2    0    1/1   FADD-2

PFCMPEQ  mm,mm           ADD     single  FADD       2    0    1/1   FADD-2
PFCMPGE  mm,mm           ADD     single  FADD       2    0    1/1   FADD-2
PFCMPGT  mm,mm           ADD     single  FADD       2    0    1/1   FADD-2
PFMAX    mm,mm           ADD     single  FADD       2    0    1/1   FADD-2
PFMIN    mm,mm           ADD     single  FADD       2    0    1/1   FADD-2
MOVLHPS  xmm,xmm         MOV     single  FADD/FMUL  3    0    2/1   FADD-2
MOVHLPS  xmm,xmm         MOV     single  FADD/FMUL  3    0    2/1   FADD-2
MOVLHPS  xmm,mem         MOV     single  FADD/FMUL  4    0    2/1   FADD-2
MOVHLPS  xmm,mem         MOV     single  FADD/FMUL  4    0    2/1   FADD-2
MOVLHPS  mem,xmm         MOV     single  FSTORE     4    0    1/1   FADD-2
MOVHLPS  mem,xmm         MOV     single  FSTORE     4    0    1/1   FADD-2


*MOVSD   xmm,xmm         MOV     single  FADD/FMUL              2    0    2/1   FADD-2
*MOVSD   xmm,mem         MOV     single  FADD/FMUL/FSTORE       2    0    2/1   FLOAD-2
*MOVSD   mem,xmm         MOV     single  FSTORE                 2    0    1/1   FSTORE-2
*MOVSS   xmm,xmm         MOV     single  FADD/FMUL              2    0    2/1   FADD-2
*MOVSS   mem,xmm         MOV     single  FSTORE                 2    0    1/1   FSTORE-2
*MOVSS   xmm,mem         MOV     single  FADD/FMUL/FSTORE       2    0    2/1   FLOAD-2

*MOVSHDUP xmm,xmm        MOV     single  FADD/FMUL         2    0    2/1   FADD-2
*MOVSHDUP xmm,mem        MOV     single  FSTORE            2    0    2/1   FLOAD-2
*MOVSLDUP xmm,xmm        MOV     single  FADD/FMUL         2    0    2/1   FADD-2
*MOVSLDUP xmm,mem        MOV     single  FSTORE            2    0    2/1   FLOAD-2
EXTRQ    xmm,xmm/imm,imm ADD     single  FADD/FMUL         2    0    2/1   FADD-2
EXTRQ    mem,xmm/imm,imm ADD     single  FADD/FMUL/FSTORE  2    0    2/1   FADD-2

*PACKSSDW mm,xmm/mm   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
*PACKSSDW mm,mem   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
*PACKSSWB mm,xmm/mm   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
*PACKSSWB mm,mem   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
*PACKUSWB mm,xmm/mm   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
*PACKUSWB mm,mem   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
*PACKSSDW mm,mem   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
*PACKSSWB xmm,xmm/mm   ADD     single  FADD/FMUL  3    0    2/1   FADD-2
*PACKUSWB xmm,xmm/mm   ADD     single  FADD/FMUL  3    0    2/1   FADD-2
*PACKSSDW xmm,mem   ADD     single  FADD/FMUL  3    0    2/1   FADD-2
*PACKSSWB xmm,mem   ADD     single  FADD/FMUL  3    0    2/1   FADD-2
*PACKUSWB xmm,mem   ADD     single  FADD/FMUL  3    0    2/1   FADD-2

PADDB    xmm/mm,xmm/mm/mem   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PADDW    xmm/mm,xmm/mm/mem   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PADDD    xmm/mm,xmm/mm/mem   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PADDQ    xmm/mm,xmm/mm/mem   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PADDSB   xmm/mm,xmm/mm/mem   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PADDSW   xmm/mm,xmm/mm/mem   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PADDUSB  xmm/mm,xmm/mm/mem   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PADDUSW  xmm/mm,xmm/mm/mem   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PAVGB    xmm/mm,xmm/mm/mem   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PAVGW    xmm/mm,xmm/mm/mem   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PAVGUSB  mm,mm/mem           ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PCMPEQB  xmm/mm,xmm/mm/mem   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PCMPEQW  xmm/mm,xmm/mm/mem   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PCMPEQD  xmm/mm,xmm/mm/mem   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PCMPGTB  xmm/mm,xmm/mm/mem   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PCMPGTW  xmm/mm,xmm/mm/mem   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PCMPGTD  xmm/mm,xmm/mm/mem   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PMAXSW   xmm/mm,xmm/mm/mem   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PMAXUB   xmm/mm,xmm/mm/mem   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PMINSW   xmm/mm,xmm/mm/mem   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PMINUB   xmm/mm,xmm/mm/mem   ADD     single  FADD/FMUL  2    0    2/1   FADD-2  

PSHUFD   xmm,xmm/mem,imm         ADD     single  FADD/FMUL  3    0    2/1   FADD-2
PSHUFW   mm,mm/mem,imm           ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PSHUFHW  xmm,xmm/mem,imm         ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PSHUFLW  xmm,xmm/mem,imm         ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PSLLW    xmm/mm,xmm/mm/mem/imm   ADD     single  FADD/FMUL  3    0    2/1   FADD-2
PSLLD    xmm/mm,xmm/mm/mem/imm   ADD     single  FADD/FMUL  3    0    2/1   FADD-2
PSLLQ    xmm/mm,xmm/mm/mem/imm   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PSLLDQ   xmm,imm         ADD     single  FADD/FMUL  3    0    2/1   FADD-2
PSRAW    xmm,xmm/mem/imm ADD single  FADD/FMUL  3    0    2/1   FADD-2
PSRAD    xmm,xmm/mem/imm ADD single  FADD/FMUL  3    0    2/1   FADD-2
PSRLW    xmm,xmm/mem/imm ADD single  FADD/FMUL  3    0    2/1   FADD-2
PSRLD    xmm,xmm/mem/imm ADD single  FADD/FMUL  3    0    2/1   FADD-2
PSRLQ    xmm,xmm/mem/imm ADD single  FADD/FMUL  3    0    2/1   FADD-2
PSRAW    mm,mm/mem/imm ADD single  FADD/FMUL  2    0    2/1   FADD-2
PSRAD    mm,mm/mem/imm ADD single  FADD/FMUL  2    0    2/1   FADD-2
PSRLW    mm,mm/mem/imm ADD single  FADD/FMUL  2    0    2/1   FADD-2
PSRLD    mm,mm/mem/imm ADD single  FADD/FMUL  2    0    2/1   FADD-2
PSRLQ    mm,mm/mem/imm ADD single  FADD/FMUL  2    0    2/1   FADD-2
PSRLDQ   xmm,imm         ADD     single  FADD/FMUL  3    0    2/1   FADD-2
PSUBB    xmm/mm,xmm/mm/mem   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PSUBW    xmm/mm,xmm/mm/mem   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PSUBD    xmm/mm,xmm/mm/mem   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PSUBQ    xmm/mm,xmm/mm/mem   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PSUBSB   xmm/mm,xmm/mm/mem   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PSUBSW   xmm/mm,xmm/mm/mem   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PSUBUSB  xmm/mm,xmm/mm/mem   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PSUBUSW  xmm/mm,xmm/mm/mem   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PSWAPD   mm,mm           ADD     single  FADD/FMUL  2    0    2/1   FADD-2

PUNPCKHBW mm,mm/mem  ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PUNPCKHWD mm,mm/mem  ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PUNPCKHDQ mm,mm/mem  ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PUNPCKLBW mm,mm/mem  ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PUNPCKLWD mm,mm/mem  ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PUNPCKLDQ mm,mm/mem  ADD     single  FADD/FMUL  2    0    2/1   FADD-2

PUNPCKHBW xmm,xmm/mem  ADD     single  FADD/FMUL  3    0    2/1   FADD-2
PUNPCKHWD xmm,xmm/mem  ADD     single  FADD/FMUL  3    0    2/1   FADD-2
PUNPCKHDQ xmm,xmm/mem  ADD     single  FADD/FMUL  3    0    2/1   FADD-2
PUNPCKLBW xmm,xmm/mem  ADD     single  FADD/FMUL  3    0    2/1   FADD-2
PUNPCKLWD xmm,xmm/mem  ADD     single  FADD/FMUL  3    0    2/1   FADD-2
PUNPCKLDQ xmm,xmm/mem  ADD     single  FADD/FMUL  3    0    2/1   FADD-2


PUNPCKHQDQ xmm,xmm/mem       ADD     single  FADD/FMUL  3    0    2/1   FADD-2
PUNPCKLQDQ xmm,xmm/mem       ADD     single  FADD/FMUL  3    0    2/1   FADD-2

PXOR     xmm/mm,xmm/mm/mem   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PAND     xmm/mm,xmm/mm/mem   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PANDN    xmm/mm,xmm/mm/mem   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
POR      xmm/mm,xmm/mm/mem   ADD     single  FADD/FMUL  2    0    2/1   FADD-2

SHUFPD   xmm,xmm/mem,imm         ADD     single  FADD/FMUL  3    0    2/1   FADD-2
SHUFPS   xmm,xmm/mem,imm         ADD     single  FADD/FMUL  3    0    2/1   FADD-2

UNPCKHPD xmm,xmm/mem         ADD     single  FADD/FMUL  2    0    2/1   FADD-2
UNPCKHPS xmm,xmm/mem         ADD     single  FADD/FMUL  2    0    2/1   FADD-2
UNPCKLPD xmm,xmm/mem         ADD     single  FADD/FMUL  2    0    2/1   FADD-2
UNPCKLPS xmm,xmm/mem         ADD     single  FADD/FMUL  2    0    2/1   FADD-2

XORPD    xmm,xmm/mem         ADD     single  FADD/FMUL  2    0    2/1   FADD-2
XORPS    xmm,xmm/mem         ADD     single  FADD/FMUL  2    0    2/1   FADD-2
ORPD    xmm,xmm/mem         ADD     single  FADD/FMUL  2    0    2/1   FADD-2
ORPS    xmm,xmm/mem         ADD     single  FADD/FMUL  2    0    2/1   FADD-2
ANDPD    xmm,xmm/mem         ADD     single  FADD/FMUL  2    0    2/1   FADD-2
ANDPS    xmm,xmm/mem         ADD     single  FADD/FMUL  2    0    2/1   FADD-2
ANDNPD    xmm,xmm/mem         ADD     single  FADD/FMUL  2    0    2/1   FADD-2
ANDNPS    xmm,xmm/mem         ADD     single  FADD/FMUL  2    0    2/1   FADD-2



MOVMSKPD reg32/reg64,xmm         MOV     single  FADD       3    0    1/1   FADD-3
MOVMSKPS reg32/reg64,xmm         MOV     single  FADD       3    0    1/1   FADD-3
PMOVMSKB reg32/reg64,xmm/mm      ADD     single  FADD       3    0    1/1   FADD-3
COMISD   xmm,xmm/mem         ADD     single  FADD       3    0    1/1   FADD-3
COMISS   xmm,xmm/mem         ADD     single  FADD       3    0    1/1   FADD-3
PSADBW   xmm/mm,xmm/mm/mem   ADD     single  FADD       3    0    1/1   FADD-3
UCOMISD  xmm,xmm/mem         ADD     single  FADD       3    0    1/1   FADD-3
UCOMISS  xmm,xmm/mem         ADD     single  FADD       3    0    1/1   FADD-3

ADDPD    xmm,xmm/mem         ADD     single  FADD       4    0    1/1   FADD-4
ADDPS    xmm,xmm/mem         ADD     single  FADD       4    0    1/1   FADD-4
ADDSD    xmm,xmm/mem         ADD     single  FADD       4    0    1/1   FADD-4
ADDSS    xmm,xmm/mem         ADD     single  FADD       4    0    1/1   FADD-4
SUBPD    xmm,xmm/mem         ADD     single  FADD       4    0    1/1   FADD-4
SUBPS    xmm,xmm/mem         ADD     single  FADD       4    0    1/1   FADD-4
SUBSD    xmm,xmm/mem         ADD     single  FADD       4    0    1/1   FADD-4
SUBSS    xmm,xmm/mem         ADD     single  FADD       4    0    1/1   FADD-4

ADDSUBPD xmm,xmm/mem         ADD     single  FADD       4    0    1/1   FADD-4
ADDSUBPS xmm,xmm/mem         ADD     single  FADD       4    0    1/1   FADD-4
HADDPD   xmm,xmm/mem         ADD     single  FADD       4    0    1/1   FADD-4
HADDPS   xmm,xmm/mem         ADD     single  FADD       4    0    1/1   FADD-4
HSUBPD   xmm,xmm/mem         ADD     single  FADD       4    0    1/1   FADD-4
HSUBPS   xmm,xmm/mem         ADD     single  FADD       4    0    1/1   FADD-4

PF2ID    mm,mm           ADD     single  FSTORE       5    0    1/1   FADD-5
PF2IW    mm,mm           ADD     single  FSTORE       5    0    1/1   FADD-5
PI2FD    mm,mm           ADD     single  FSTORE       5    0    1/1   FADD-5
PI2FW    mm,mm           ADD     single  FSTORE       5    0    1/1   FADD-5

PFACC    mm,mm           ADD     single  FADD       4    0    1/1   FADD-4
PFADD    mm,mm           ADD     single  FADD       4    0    1/1   FADD-4
PFNACC   mm,mm           ADD     single  FADD       4    0    1/1   FADD-4
PFPNACC  mm,mm           ADD     single  FADD       4    0    1/1   FADD-4
PFSUB    mm,mm           ADD     single  FADD       4    0    1/1   FADD-4
PFSUBR   mm,mm           ADD     single  FADD       4    0    1/1   FADD-4

*PINSRW  xmm/mm,reg32/reg64/mem,imm     ADD     double  FADD/FMUL  9    0    1/3   FADD-9

*MOVHPD  mem,xmm         MOV     single  FSTORE     2    0    1/1   FSTORE-2
*MOVHPD  xmm,mem         MOV     single  FADD/FMUL  4    0    2/1   FLOAD-4
*MOVHPS  mem,xmm         MOV     single  FSTORE     2    0    1/1   FSTORE-2
*MOVHPS  xmm,mem         MOV     single  FADD/FMUL  4    0    2/1   FLOAD-4
*MOVLPD  mem,xmm         MOV     single  FSTORE     2    0    1/1   FSTORE-2
*MOVLPD  xmm,mem         MOV     single  FADD/FMUL  4    0    2/1   FLOAD-4
*MOVLPS  mem,xmm         MOV     single  FSTORE     2    0    1/1   FSTORE-2
*MOVLPS  xmm,mem         MOV     single  FADD/FMUL  4    0    2/1   FLOAD-4

/* The instruction latency is not given for these instructions in manual */
/* 40546.pdf, pg 261               */
MOVNTDQ  mem,xmm         MOV     double  FMUL&FSTORE     3   0    1/1  FSTORE-X
MOVNTPD  mem,xmm         MOV     double  FMUL&FSTORE     3   0    1/3  FSTORE-X
MOVNTPS  mem,xmm         MOV     double  FMUL&FSTORE     3   0    1/3  FSTORE-X
MOVNTSD  mem,xmm         MOV     double  FSTORE     3   0    1/1  FSTORE-X
MOVNTSS  mem,xmm         MOV     double  FSTORE     3   0    1/1  FSTORE-X
MOVNTQ   mem,mm          MOV     single  FSTORE     3   0    1/1  FSTORE-X

LDDQU    xmm,mem         LOAD    single  FSTORE     2    0    2/1   FLOAD-2

CVTPS2PD xmm,xmm/mem         CNVT    single  FSTORE     2    0    1/1   REGWRITE-2
CVTPD2PS xmm,xmm/mem         CNVT    double  (FADD/FMUL)&FSTORE 7    0  1/1  REGWRITE-7
CVTSD2SS xmm,xmm/mem         CNVT    vector  (FADD/FMUL)&FSTORE 8    0  1/2  REGWRITE-8
*CVTSS2SD xmm,xmm/mem   ADD/WRITE vector  (FADD/FMUL)&FSTORE 7  0  1/2  REGWRITE-7
CVTDQ2PS xmm,xmm/mem         CNVT    single  FSTORE     4    0    1/1   REGWRITE-4
CVTDQ2PD xmm,xmm/mem         CNVT    single  FSTORE     4    0    1/1   REGWRITE-4
CVTPS2DQ xmm,xmm/mem         CNVT    single  FSTORE     4    0    1/1   REGWRITE-4
CVTTPS2DQ xmm,xmm/mem        CNVT    single  FSTORE     4    0    1/1   REGWRITE-4
CVTPD2DQ xmm,xmm/mem    ADD/WRITE double  (FADD/FMUL)&FSTORE 7    0  1/1  REGWRITE-7
CVTTPD2DQ xmm,xmm/mem   ADD/WRITE double  (FADD/FMUL)&FSTORE 7    0  1/1  REGWRITE-7
CVTPI2PS xmm,mm/mem     ADD/WRITE double  (FADD/FMUL)&FSTORE 7    0  1/1  REGWRITE-7
CVTPI2PD xmm,mm/mem          CNVT    single  FSTORE     4    0    1/1   REGWRITE-4
CVTPS2PI mm,xmm/mem          CNVT    single  FSTORE     4    0    1/1   REGWRITE-4
CVTTPS2PI mm,xmm/mem         CNVT    single  FSTORE     4    0    1/1   REGWRITE-4
CVTPD2PI mm,xmm/mem     ADD/WRITE double  (FADD/FMUL)&FSTORE 7    0  1/1  REGWRITE-7
CVTTPD2PI mm,xmm/mem    ADD/WRITE double  (FADD/FMUL)&FSTORE 7    0  1/1  REGWRITE-7
*CVTSI2SS xmm/reg32/reg64/reg32/reg64,mem  ADD/WRITE double  (FADD/FMUL)&FSTORE 9    0  1/1  REGWRITE-9
*CVTSI2SS xmm/reg32/reg64,xmm/reg32/reg64  ADD/WRITE vector  (FADD/FMUL)&FSTORE 14   0  1/3  REGWRITE-14
*CVTSI2SD xmm/reg32/reg64,mem  ADD/WRITE double  (FADD/FMUL)&FSTORE 9    0  1/1  REGWRITE-9 
*CVTSI2SD xmm/reg32/reg64,xmm/reg32/reg64  ADD/WRITE vector  (FADD/FMUL)&FSTORE 14   0  1/3  REGWRITE-14
CVTSD2SI  reg32/reg64,xmm/mem         ADD/WRITE double  FADD&FSTORE 8   0   1/1  REGWRITE-8
CVTTSD2SI reg32/reg64,xmm/mem        ADD/WRITE double  FADD&FSTORE 8   0   1/1  REGWRITE-8
CVTSS2SI  reg32/reg64,xmm/mem         ADD/WRITE double  FADD&FSTORE 8   0   1/1  REGWRITE-8
CVTTSS2SI reg32/reg64,xmm/mem        ADD/WRITE double  FADD&FSTORE 8   0   1/1  REGWRITE-8
*CVTSS2SS xmm,xmm/mem   ADD/WRITE vector  (FADD/FMUL)&FSTORE 8  0  1/1  REGWRITE-8

PEXTRW   reg32/reg64/mem,xmm/mm,imm  ADD/WRITE double FADD&FSTORE 6   0   1/1   REGWRITE-6


PFRCP    mm,mm           FMUL    single  FMUL       3    0    1/1   FMUL-3
PFRSQRT  mm,mm           FMUL    single  FMUL       3    0    1/1   FMUL-3

PMADDWD  xmm/mm,xmm/mm/mem   FMUL    single  FMUL       3    0    1/1   FMUL-3

PMULHUW  xmm/mm,xmm/mm/mem         FMUL    single  FMUL       3    0    1/1   FMUL-3
PMULHW   xmm/mm,xmm/mm/mem         FMUL    single  FMUL       3    0    1/1   FMUL-3
PMULLW   xmm/mm,xmm/mm/mem         FMUL    single  FMUL       3    0    1/1   FMUL-3
PMULUDQ  xmm/mm,xmm/mm/mem         FMUL    single  FMUL       3    0    1/1   FMUL-3
PMULHRW  xmm/mm,xmm/mm/mem           FMUL    single  FMUL       3    0    1/1   FMUL-3

RCPPS    xmm,xmm/mem         FMUL    single  FMUL       3    0    1/1   FMUL-3
RCPSS    xmm,xmm/mem         FMUL    single  FMUL       3    0    1/1   FMUL-3
RSQRTPS  xmm,xmm/mem         FMUL    single  FMUL       3    0    1/1   FMUL-3
RSQRTSS  xmm,xmm/mem         FMUL    single  FMUL       3    0    1/1   FMUL-3

MULPD    xmm,xmm/mem         FMUL    single  FMUL       4    0    1/1   FMUL-4
MULPS    xmm,xmm/mem         FMUL    single  FMUL       4    0    1/1   FMUL-4
MULSD    xmm,xmm/mem         FMUL    single  FMUL       4    0    1/1   FMUL-4
MULSS    xmm,xmm/mem         FMUL    single  FMUL       4    0    1/1   FMUL-4

PFMUL    mm,mm           FMUL    single  FMUL       4    0    1/1   FMUL-4
PFRCPIT1 mm,mm           FMUL    single  FMUL       4    0    1/1   FMUL-4
PFRCPIT2 mm,mm           FMUL    single  FMUL       4    0    1/1   FMUL-4
PFRSQIT1 mm,mm           FMUL    single  FMUL       4    0    1/1   FMUL-4

DIVSS    xmm,xmm/mem         FDIV    single  FMUL       16   0    1/13  FDIV-16
DIVPS    xmm,xmm/mem         FDIV    single  FMUL       18   0    1/15  FDIV-18
DIVPD    xmm,xmm/mem         FDIV    single  FMUL       20   0    1/17  FDIV-20
DIVSD    xmm,xmm/mem         FDIV    single  FMUL       20   0    1/17  FDIV-20

SQRTSS   xmm,xmm/mem         SQRT    single  FMUL       19   0    1/18  FSQRT-19
SQRTPS   xmm,xmm/mem         SQRT    single  FMUL       21   0    1/18  FSQRT-21
SQRTPD   xmm,xmm/mem         SQRT    single  FMUL       27    0    1/24  FSQRT-27
SQRTSD   xmm,xmm/mem         SQRT    single  FMUL       27    0    1/24  FSQRT-27

FRSTOR   reg32/reg64/mem             RESTORE vector  NONE      133  0    1/133  SPECIAL
FSAVE    reg32/reg64/mem             SAVE    vector  NONE      162  0    1/162  SPECIAL
FXRSTOR  reg32/reg64/mem             RESTORE vector  NONE      89   0    1/89  SPECIAL
FXSAVE   reg32/reg64/mem             SAVE    vector  NONE      63   0    1/63  SPECIAL
*INSERTQ xmm,xmm         INSERT  vector  FSTORE     6   0    1/2   SPECIAL
*INSERTQ xmm,xmm,imm,imm INSERT  vector  FSTORE     6   0    1/2   SPECIAL
LDMXCSR  mem8/mem16/mem32/mem64             LOAD    vector  FSTORE    12   0    1/12  SPECIAL
MASKMOVDQU xmm,xmm       MOV     vector  FSTORE    99   0    1/99  SPECIAL
MASKMOVDQU mem,xmm,xmm   MOV     vector  FSTORE    99   0    1/99  SPECIAL
MASKMOVQ   mm,mm         MOV     vector  FSTORE    99   0    1/99  SPECIAL
MASKMOVQ   mem,mm,mm     MOV     vector  FSTORE    99   0    1/99  SPECIAL

STMXCSR  none            STORE   vector  FSTORE    12   0    1/12  SPECIAL
STMXCSR  mem8/mem16/mem32/mem64            STORE   vector  FSTORE    12   0    1/12  SPECIAL

/* General Purpose Instructions */

/*  Instruction;Operands;Operation;Decode Unit;Execution Unit;Base Latency;*/
/*              +Memory Latency;Throughput;Category       */
/*  By default, if an instruction has no character to its left, this means */
/*  that there is always a 2-cycle difference between that instruction have */
/*  only xmm register operands and that instruction having a memory operand.*/
/*  Any instruction that has a memory operand as its second operand is a LOAD.*/
/*  Instructions with an * in front of them means that the operands must be */
/*  inspected before you can tell which      */
/*  execution unit it will use, and therefore, its latency. */

/* I'm actually not sure of the throughput of any of these instructions. */
/* The instruction table doesn't have a throughput column, so I'm assuming */
/* that the throughput is 1/1, but this may need to be verified with */
/*  microbenchmarks. */

*ADC     reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64/imm     ADD     single  ALU        1    0    3/1   ALU-1 
*ADC     mem8/mem16/mem32/mem64,reg8/reg16/reg32/reg64/imm     ADD     single  ALU        4    0    1/1   STORE-4
*ADC     reg8/reg16/reg32/reg64,mem         ADD     single  ALU        1    0    2/1   ALU-1 

*ADD     reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64/imm     ADD     single  ALU        1    0    3/1   ALU-1 
*ADD     mem8/mem16/mem32/mem64,reg8/reg16/reg32/reg64/imm     ADD     single  ALU        4    0    1/1   STORE-4
*ADD     reg8/reg16/reg32/reg64,mem         ADD     single  ALU        1    0    2/1   ALU-1 

*AND     reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64/imm     ADD     single  ALU        1    0    3/1   ALU-1 
*AND     mem8/mem16/mem32/mem64,reg8/reg16/reg32/reg64/imm     ADD     single  ALU        4    0    1/1   STORE-4
*AND     reg8/reg16/reg32/reg64,mem         ADD     single  ALU        1    0    2/1   ALU-1 

BSWAP    reg8/reg16/reg32/reg64             SWAP    single  ALU        1    0    1/1   ALU-1 

*BT      reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64/imm     BCPY    single  ALU        1    0    3/1   ALU-1 
*BT      mem8/mem16/mem32/mem64,imm         BCPY    single  ALU        1    0    3/1   ALU-1 
*BT      mem,reg8/reg16/reg32/reg64         BCPY    vector  ALU        7    0    1/2   ALU-7 

*BTC     reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64/imm     BCPY    double  ALU        2    0    3/1   ALU-2 
*BTC     mem,reg8/reg16/reg32/reg64         BCPY    vector  ALU        8    0    1/10   ALU-7 
*BTC     mem8/mem16/mem32/mem64,imm         BCPY    vector  ALU        9    0    2/3   ALU-7 

*BTR     reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64/imm     BCPY    double  ALU        2    0    3/1   ALU-2 
*BTR     mem,reg8/reg16/reg32/reg64         BCPY    vector  ALU        8    0    1/7   ALU-7 
*BTR     mem8/mem16/mem32/mem64,imm         BCPY    vector  ALU        9    0    2/3   ALU-7 

*BTS     reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64/imm     BCPY    double  ALU        2    0    3/1   ALU-2 
*BTS     mem,reg8/reg16/reg32/reg64         BCPY    vector  ALU        8    0    1/7   ALU-7 
*BTS     mem8/mem16/mem32/mem64,imm         BCPY    vector  ALU        9    0    2/3   ALU-7 

*CMP      reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64/imm     CMP     single  ALU        1    0    3/1   ALU-1 
*CMP      mem8/mem16/mem32/mem64,reg8/reg16/reg32/reg64/imm     CMP     single  ALU        1    0    3/1   ALU-1 */
*CMP      reg8/reg16/reg32/reg64/mem,mem     	 CMP     single  ALU        1    0    2/1   ALU-1 
*DEC      reg8/reg16/reg32/reg64             ADD     single  ALU        1    0    3/1   ALU-1 
*INC      reg8/reg16/reg32/reg64             ADD     single  ALU        1    0    3/1   ALU-1 
*NEG      reg8/reg16/reg32/reg64             ADD     single  ALU        1    0    3/1   ALU-1 
*DEC      mem8/mem16/mem32/mem64             ADD     single  ALU        7    0    1/2   ALU-1 
*INC      mem8/mem16/mem32/mem64             ADD     single  ALU        7    0    1/2   ALU-1 
*NEG      mem8/mem16/mem32/mem64             ADD     single  ALU        7    0    1/2   ALU-1 
*NOT      reg8/reg16/reg32/reg64             ADD     single  ALU        1    0    3/1   ALU-1 
*NOT      mem8/mem16/mem32/mem64             ADD     single  ALU        7    0    1/1   ALU-1 
*OR      reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64/imm     ADD     single  ALU        1    0    3/1   ALU-1 
*OR      mem8/mem16/mem32/mem64,reg8/reg16/reg32/reg64/imm     ADD     single  ALU        4    0    1/1   STORE-4
*OR      reg8/reg16/reg32/reg64,mem         ADD     single  ALU        1    0    2/1   ALU-1 
*RCL     reg8/reg16/reg32/reg64,imm           ROT     single  ALU        1    0    1/1   ALU-1 
*RCL     mem8/mem16/mem32/mem64,imm           ROT     single  ALU        7    0    1/1   ALU-4 
*RCL     reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64          ROT     vector  ALU        4    0    1/4   ALU-6 
*RCL     reg8/reg16/reg32/reg64,imm         ROT     vector  ALU        3    0    1/3   ALU-7 
*RCL     mem8/mem16/mem32/mem64,imm         ROT     vector  ALU        7    0    1/5   ALU-7 
*RCL     mem,reg8/reg16/reg32/reg64          ROT     vector  ALU        8    0    1/6   ALU-7 
*RCR     reg8/reg16/reg32/reg64,imm           ROT     single  ALU        1    0    1/1   ALU-1 
*RCR     mem8/mem16/mem32/mem64,imm           ROT     single  ALU        7    0    1/1   ALU-4 
*RCR     reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64          ROT     vector  ALU        3    0    1/3   ALU-6 
*RCR     reg8/reg16/reg32/reg64,imm         ROT     vector  ALU        3    0    1/3   ALU-7 
*RCR     mem8/mem16/mem32/mem64,imm         ROT     vector  ALU        7    0    1/6   ALU-7 
*RCR     mem8/mem16/mem32/mem64,reg8/reg16/reg32/reg64          ROT     vector  ALU        7    0    1/5   ALU-7 
*ROL     reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64/imm    ROT     single  ALU        1    0    3/1   ALU-1 
*ROR     reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64/imm    ROT     single  ALU        1    0    3/1   ALU-1 
*ROL     mem8/mem16/mem32/mem64,reg8/reg16/reg32/reg64/imm    ROT     single  ALU        7    0    1/1   ALU-1 
*ROR     mem8/mem16/mem32/mem64,reg8/reg16/reg32/reg64/imm    ROT     single  ALU        7    0    1/1   ALU-1 
*SAL     reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64/imm    ROT     single  ALU        1    0    3/1   ALU-1 
*SAL     mem8/mem16/mem32/mem64,reg8/reg16/reg32/reg64/imm    ROT     single  ALU        7    0    1/1   ALU-1 
*SAR     reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64/imm    ROT     single  ALU        1    0    3/1   ALU-1 
*SAR     mem8/mem16/mem32/mem64,reg8/reg16/reg32/reg64/imm    ROT     single  ALU        7    0    1/1   ALU-1 
*SHR     reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64/imm    ROT     single  ALU        1    0    3/1   ALU-1 
*SHR     mem8/mem16/mem32/mem64,reg8/reg16/reg32/reg64/imm    ROT     single  ALU        7    0    1/1   ALU-1 
*SHL     reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64/imm    ROT     single  ALU        1    0    3/1   ALU-1 
*SHL     mem8/mem16/mem32/mem64,reg8/reg16/reg32/reg64/imm    ROT     single  ALU        7    0    1/1   ALU-1 
*SBB     reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64/imm     ADD     single  ALU        1    0    3/1   ALU-1 
*SBB     mem8/mem16/mem32/mem64,reg8/reg16/reg32/reg64/imm     ADD     single  ALU        4    0    1/1   STORE-4
*SBB     reg8/reg16/reg32/reg64,mem         ADD     single  ALU        1    0    2/1   ALU-1 
*SUB     reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64/imm     ADD     single  ALU        1    0    3/1   ALU-1 
*SUB     mem8/mem16/mem32/mem64,reg8/reg16/reg32/reg64/imm     ADD     single  ALU        4    0    1/1   STORE-4
*SUB     reg8/reg16/reg32/reg64,mem         ADD     single  ALU        1    0    2/1   ALU-1 
*TEST    reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64/imm	 AND     single  ALU        1    0    3/1   ALU-1 
*TEST    reg8/reg16/reg32/reg64,mem 	     AND     single  ALU        1    0    2/1   ALU-1 
*TEST    mem8/mem16/mem32/mem64,reg/imm 	     AND     single  ALU        4    0    1/1   ALU-1 
*XOR     reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64/imm     ADD     single  ALU        1    0    3/1   ALU-1 
*XOR     mem8/mem16/mem32/mem64,reg8/reg16/reg32/reg64/imm     ADD     single  ALU        4    0    1/1   STORE-4
*XOR     reg8/reg16/reg32/reg64,mem         ADD     single  ALU        1    0    2/1   ALU-1 
CBW      reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64         CNVT    single  ALU       1    0    3/1   ALU-1
CWDE     reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64         CNVT    single  ALU       1    0    3/1   ALU-1
CDQE     reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64         CNVT    single  ALU       1    0    3/1   ALU-1
CWD      reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64         CNVT    single  ALU       1    0    3/1   ALU-1
CDQ      reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64         CNVT    single  ALU       1    0    3/1   ALU-1
CQO      reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64         CNVT    single  ALU       1    0    3/1   ALU-1
CLC      reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64         CLRF    single  ALU       1    0    3/1   ALU-1
CLD      reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64         CLRF    single  ALU       1    0    3/1   ALU-1
CMC      reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64         CLRF    single  ALU       1    0    3/1   ALU-1

CBW      none         CNVT    single  ALU       1    0    3/1   ALU-1
CWDE     none         CNVT    single  ALU       1    0    3/1   ALU-1
CDQE     none         CNVT    single  ALU       1    0    3/1   ALU-1
CWD      none         CNVT    single  ALU       1    0    3/1   ALU-1
CDQ      none         CNVT    single  ALU       1    0    3/1   ALU-1
CQO      none         CNVT    single  ALU       1    0    3/1   ALU-1
CLC      none         CLRF    single  ALU       1    0    3/1   ALU-1
CLD      none         CLRF    single  ALU       1    0    3/1   ALU-1
CMC      none         CLRF    single  ALU       1    0    3/1   ALU-1


/*  The cc in CMOVcc is a condition code.  These are in the instruction manual,*/
/*  24594.pdf, page 91. */
*CMOVCC   reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64         CMOV    single  ALU       1    0    3/1   ALU-1
*CMOVCC   reg8/reg16/reg32/reg64,mem         CMOV    single  ALU       4    0    2/1   ALU-1
/*  The cc in J cc is a condition code.  These are in the instruction manual,  */
/*  24594.pdf, page 130. */
JCC      disp8/disp16/disp32/disp64/disp128 COND single  ALU       1    0    1/1   ALU-1 
/*JCC      disp COND single  ALU       1    0    1/1   ALU-1 */

/* Waleed: far jumps have longer latencies but don't know how to put entry here */
*JMP     disp8/disp16/disp32/disp64/disp128/reg8/reg16/reg32/reg64        JMP     single  ALU       1    0    1/1   ALU-1
*JMP     mem8/mem16/mem32/mem64/mem128        JMP     single  ALU       1    0    1/1   ALU-1

*MOV     reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64/imm         MOV     single  ALU       1    0    3/1   ALU-1
*MOV     mem8/mem16/mem32/mem64,reg8/reg16/reg32/reg64/imm         MOV     single  ALU       3    0    2/1   ALU-1
*MOV     reg8/reg16,mem         MOV     single  ALU       4    0    2/1   ALU-1
*MOV     reg32/reg64,mem        MOV     single  ALU       3    0    2/1   ALU-1

*MOVSX    reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64         MOV     single  ALU       1    0    3/1   ALU-1
*MOVZX    reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64         MOV     single  ALU       1    0    3/1   ALU-1
*MOVSX    reg8/reg16/reg32/reg64,mem         MOV     single  ALU       4    0    2/1   ALU-1
*MOVZX    reg8/reg16/reg32/reg64,mem         MOV     single  ALU       4    0    2/1   ALU-1
*MOVSXD   reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64         MOV     single  ALU       1    0    3/1   ALU-1
*MOVSXD   reg8/reg16/reg32/reg64,mem         MOV     single  ALU       4    0    2/1   ALU-1

SAHF     none            FLAGS   single  ALU       1    0    3/1   ALU-1
/* The cc in SET is a condition code.  These are in the */
/* instruction manual, 24594.pdf page 225. */
*SETCC    reg8/reg16/reg32/reg64             SETF    single  ALU       1    0    3/1   ALU-1
*SETCC    mem8/mem16/mem32/mem64             SETF    single  ALU       1    0    2/1   ALU-1

STC      none            SETF    single  ALU       1    0    3/1   ALU-1

*LZCNT    reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64/mem         CNT     single  ALU2      2    0    1/1   ALU-2 
*POPCNT   reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64/mem         POP     single  ALU2      2    3    1/1   ALU-2 

*XADD    reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64         ADD     vectir  ALU       2    0    1/1   ALU-2 
//*XADD    mem,reg8/reg16/reg32/reg64         ADD     vector  ALU       5    0    1/1   STORE-5

JCXZ     disp8/disp16/disp32/disp64/disp128            COND    double  ALU       2    0    1/1   ALU-2
JECXZ    disp8/disp16/disp32/disp64/disp128            COND    double  ALU       2    0    1/1   ALU-2
JRCXZ    disp8/disp16/disp32/disp64/disp128            COND    double  ALU       2    0    1/1   ALU-2
STD      none            SETF    double  ALU       2    0    3/2   ALU-2
*XCHG    reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64         XCHG    vector  ALU       1    0    1/1   ALU-2
*XCHG    reg8/reg16/reg32/reg64,mem         XCHG    vector  ALU       21   0    1/19  LOAD-21
*XCHG    mem32/mem64,reg32/reg64 XCHG  double  ALU       15   0    1/1   STORE-15
*XCHG    mem8,reg8       XCHG    vector  ALU       16   0    1/1   STORE-16
*XCHG    mem16,reg16     XCHG    double  ALU       16   0    1/1   STORE-16

*IMUL    reg8/mem8            MUL     single  ALU0       3    0      1/1   ALU-3 
*IMUL    reg16/mem16            MUL     single  ALU0       3    0    1/2   ALU-3 
*IMUL    reg32/mem32            MUL     single  ALU0       3    0    1/1   ALU-3 
*IMUL    reg64/mem64            MUL     single  ALU0       4    0    1/2   ALU-3 
*IMUL    reg64,reg64/mem64            MUL     single  ALU0       4    0    1/2   ALU-3 
*IMUL    reg16/reg32,reg16/reg32            MUL     single  ALU0       3    0    1/3   ALU-3 
*IMUL    reg16/reg32,mem16/mem32            MUL     single  ALU0       3    0    1/3   ALU-3 
*IMUL    reg16,reg16,imm MUL     vector  ALU0       4    0    1/1   ALU-4 
*IMUL    reg32,reg32,imm MUL     vector  ALU0       3    0    1/1   ALU-4 
*IMUL    reg64,reg64,imm MUL     vector  ALU0       4    0    1/2   ALU-4 
*IMUL    reg8/reg16/reg32/reg64,mem8/mem16/mem32/mem64,imm MUL     vector  ALU0           4    0    1/2   ALU-4 

*MUL    reg8/mem8            MUL     single  ALU0       3    0      1/1   ALU-3 
*MUL    reg16/mem16            MUL     single  ALU0       3    0    1/2   ALU-3 
*MUL    reg32/mem32            MUL     single  ALU0       3    0    1/1   ALU-3 
*MUL    reg64/mem64            MUL     single  ALU0       4    0    1/2   ALU-3 

*CMPXCHG reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64         CMP     vector  ALU        3    0    1/1   ALU-3 
*CMPXCHG mem16/mem32/mem64,reg16/reg32/reg64 CMP vector ALU     5    0    1/1   ALU-5 
*CMPXCHG mem8,reg8       CMP     vector  ALU        6    0    1/1   ALU-6 

*PUSH    mem8/mem16/mem32/mem64             STACK   double  ALU        3    0    1/1   ALU-3 
*PUSH    reg8/reg16/reg32/reg64/imm         STACK   single  ALU        3    0    2/1   ALU-3
/* *PUSH    CS/DS/ES/FS/GS/SS STACK double  ALU        3    0    2/1   ALU-3 */
*POP     mem8/mem16/mem32/mem64             STACK   vector  ALU        3    0    1/1   ALU-3 
*POP     reg32/reg64        STACK   single  ALU        3    0    2/1   ALU-3
*POP     SS              STACK   vector  ALU        26   0    1/16   ALU-26
*POP     reg16           STACK   double  ALU        4    0    1/1   ALU-4
*POP     DS/ES/FS/GS     STACK   vector  ALU        10   0    1/8   ALU-10

/* Waleed: far calls take much longer, but don't know how to enter that */
*CALL    disp8/disp16/disp32/disp64/disp128        STACK   double  ALU        2    0    1/2   ALU-3
*CALL    reg8/reg16/reg32/reg64        STACK   double  ALU        3    0    1/3   ALU-3
*CALL    mem8/mem16/mem32/mem64        STACK   double  ALU        3    0    1/3   ALU-3

LAHF     none            LDF     vector  ALU        3    0    1/2   ALU-3

*BSF      reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64         SCAN    vector  ALU        4    0    1/3   ALU-4 
*BSF      reg8/reg16/reg32/reg64,mem         SCAN    vector  ALU        7    0    1/3   ALU-4 
*BSR      reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64         SCAN    vector  ALU        4    0    1/3   ALU-4 
*BSR      reg8/reg16/reg32/reg64,mem         SCAN    vector  ALU        7    0    1/3   ALU-4 

*SHLD    reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64,imm  SHIFT   vector  ALU        3    0    1/2   ALU-4 
*SHLD    reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64  SHIFT   vector  ALU        3    0    1/3   ALU-4 
*SHLD    mem,reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64  SHIFT   vector  ALU        8    0    1/6   ALU-4 
*SHLD    mem8/mem16/mem32/mem64,imm  SHIFT   vector  ALU        8    0    1/6   ALU-4 
*SHRD    reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64,imm  SHIFT   vector  ALU        3    0    1/2   ALU-4 
*SHRD    reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64  SHIFT   vector  ALU        3    0    1/3   ALU-4 
*SHRD    mem,reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64  SHIFT   vector  ALU        8    0    1/6   ALU-4 
*SHRD    mem8/mem16/mem32/mem64,imm  SHIFT   vector  ALU        8    0    1/6   ALU-4 


/* Waleed: also near and far have different latencies? */
*RET     none            STACK   single  ALU       3    0    1/3   ALU-4
*RET     imm           STACK   double  ALU       3    0    1/3   ALU-4

SCAS     none/reg8/reg16/reg32/reg64	   CMP     vector  ALU       2    0    1/2   ALU-4
SCASB    none/reg8            CMP     vector  ALU       4    0    1/2   ALU-4
SCASW    none/reg16           CMP     vector  ALU       4    0    1/2   ALU-4
SCASD    none/reg32           CMP     vector  ALU       4    0    1/2   ALU-4
SCASQ    none/reg64           CMP     vector  ALU       4    0    1/2   ALU-4

XLAT     none            CPY     vector  ALU       5    0    1/5   ALU-5
XLATB    none            CPY     vector  ALU       5    0    1/5   ALU-5

BOUND    reg8/reg16/reg32/reg64,mem         ADD     vector  ALU       6    0    1/2   ALU-6 
CMPS     reg8/reg16/reg32/reg64/none             CMP     vector  ALU       3    0    1/3   ALU-6 
CMPSB    reg8/none            CMP     vector  ALU       6    0    1/3   ALU-6 
CMPSW    reg16/none           CMP     vector  ALU       6    0    1/3   ALU-6 
CMPSD    reg32/none           CMP     vector  ALU       6    0    1/3   ALU-6 
CMPSQ    reg64/none           CMP     vector  ALU       6    0    1/3   ALU-6 

POPA     reg16,mem16     STACK   vector  ALU       6    0    1/6   ALU-6
POPAD    reg32,mem32     STACK   vector  ALU       6    0    1/6   ALU-6
PUSHA    mem16,reg16     STACK   vector  ALU       6    0    1/6   ALU-6
PUSHAD   mem32,reg32     STACK   vector  ALU       6    0    1/6   ALU-6

*LOOPCC  disp64            COND    vector  ALU       7    0    1/1   ALU-7 
*LOOPCC  disp32          COND    vector  ALU       8    0    1/1   ALU-8 

CMPXCHG8B mem64          CMP     vector  ALU       10   0    1/1   ALU-10
CMPXCHG16B mem128        CMP     vector  ALU       11   0    1/1   ALU-11

POPF     reg16,mem       STACK   vector  ALU       16   0    1/11   ALU-15
POPFD    reg32,mem       STACK   vector  ALU       16   0    1/11   ALU-15
POPFQ    reg64,mem       STACK   vector  ALU       16   0    1/11   ALU-15

/* Waleed: Some DIV's have ranges so I'm picking upper bound of range */
*DIV      reg8/mem8        DIV     vector  ALU      17  0    1/17  ALU   
*DIV      reg16/mem16      DIV     vector  ALU      30  0    1/30  ALU   
*DIV      reg32/mem32      DIV     vector  ALU      46  0    1/46  ALU   
*DIV      reg64/mem64      DIV     vector  ALU      78  0    1/78  ALU   
*IDIV      reg8        DIV     vector  ALU      19  0    1/19  ALU   
*IDIV      mem8        DIV     vector  ALU      22  0    1/22  ALU   
*IDIV      reg16/mem16      DIV     vector  ALU      39  0    1/39  ALU   
*IDIV      reg32/mem32      DIV     vector  ALU      55  0    1/55  ALU   
*IDIV      reg64/mem64      DIV     vector  ALU      87  0    1/87  ALU   


/*  For the PUSHF, PUSHFD, and PUSHFQ instructions, there is no latency */
/*  listed (guess: same as regular) */
PUSHF    mem16,reg       STACK   vector  ALU       3   0    1/3  ALU  
PUSHFD   mem32,reg       STACK   vector  ALU       3   0    1/3  ALU  
PUSHFQ   mem64,reg       STACK   vector  ALU       3   0    1/3  ALU  

/*  Mem addresses with a base and an index only have latency 1; mem   */
/*  addresses that have a base, index, and scale have a latency of 2. */
/* Waleed: LEA does not actually perform a load, it only computes Eff. Address */
/* Waleed: change source operand to reg */
LEA      reg32/reg64,reg    LOAD    single  AGU       2    0    3/1   LOAD-1
LEA      reg16,reg       LOAD    vector  AGU       3    0    1/1   LOAD-3

LODS     reg,mem8/mem16/mem32/mem64 LOADS vector  ALU       5    0    1/2   LOAD-5
LODSB    reg,mem8        LOADS   vector  ALU       5    0    1/2   LOAD-5
LODSW    reg,mem16       LOADS   vector  ALU       5    0    1/2   LOAD-5
LODSD    reg,mem32       LOADS   vector  ALU       4    0    1/2   LOAD-4
/*  I'm not sure about the latency on the LOADSQ instruction.  This is */
/*  in the instruction description (24594.pdf,pg 149), but is not in */
/*  40546.pdf (page 244).  I'm guessing a latency of 5, */
/*  but I think this will need to be micro-benchmarked. */
LODSQ    reg,mem64       LOADS   vector  ALU       5    0    1/2   LOAD-5

STOS     mem8/mem16/mem32/mem64,reg STS   vector  ALU       4    0    1/2   STORE-4
STOSB    mem8,reg        STS     vector  ALU       4    0    1/2   STORE-4
STOSW    mem16,reg       STS     vector  ALU       4    0    1/2   STORE-4
STOSD    mem32,reg       STS     vector  ALU       4    0    1/2   STORE-4
STOSQ    mem64,reg       STS     vector  ALU       4    0    1/2   STORE-4

MOVS     mem8/mem16/mem32/mem64   MOV     vector  ALU       5    0    1/3   STORE-5
MOVSB    mem8            MOV     vector  ALU       5    0    1/3   STORE-5
MOVSW    mem16           MOV     vector  ALU       5    0    1/3   STORE-5
MOVSD    mem32           MOV     vector  ALU       5    0    1/3   STORE-5
MOVSQ    mem64           MOV     vector  ALU       5    0    1/3   STORE-5



/* The MOVNTI instruction's latency is variable. It uses the processor's */
/* write-combining resources. Should microbenchmark to determine latency.*/
MOVNTI   mem,reg8/reg16/reg32/reg64         MOV     single  ALU        99   0    1/1   STORE-X
	
*CPUID   fn0x0           SPEC    vector  ALU        41   0    1/1   SPECIAL
*CPUID   fn0x1           SPEC    vector  ALU        127  0    1/1   SPECIAL
*CPUID   fn0x2           SPEC    vector  ALU        37   0    1/1   SPECIAL
*CPUID   none            SPEC    vector  ALU        164   0    1/1   SPECIAL
DAA      reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64         SPEC    vector  ALU        7    0    1/7   SPECIAL
DAS      reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64         SPEC    vector  ALU        7    0    1/7   SPECIAL
*ENTER   imm32,0         STACK   vector  ALU        14   0    1/14   SPECIAL
*ENTER   imm32,imm         STACK   vector  ALU        17   0    1/17   SPECIAL
*ENTER   imm32,imm         STACK   vector  ALU        19   0    1/19   SPECIAL
LEAVE    reg8/reg16/reg32/reg64,mem         STACK   double  ALU        3    0    1/3   SPECIAL
LEAVE    none         STACK   double  ALU        3    0    1/3   SPECIAL
LEAVE    reg8/reg16/reg32/reg64         STACK   double  ALU        3    0    1/3   SPECIAL
/* Waleed: fixed NOPs, they go to ALU and single path decode */
NOP      none            SPEC    single    ALU       1    0    3/1   SPECIAL
NOP      reg8/reg16/reg32/reg64/mem8/mem16/mem32/mem64            SPEC    single    ALU       1    0    3/1   SPECIAL
NOP      mem,reg8/reg16/reg32/reg64            SPEC    single    ALU       1    0    3/1   SPECIAL
NOP      reg8/reg16/reg32/reg64,mem            SPEC    single    ALU       1    0    3/1   SPECIAL

RDTSC    none            SPEC    none    none       1    0    1/67   SPECIAL
SYSCALL  none            SPEC    none    none       1    0    1/1   SPECIAL

FWAIT	none		WAIT	single	none	    0    0    1/1   SPECIAL
FLD	reg8/reg16/reg32/reg64		LOAD	single	FADD/FSTORE	    2    0    2/1   SPECIAL
FLD	mem8/mem16/mem32/mem64		LOAD	single	FADD/FSTORE	    4    0    2/1   SPECIAL
FLD	mem80		LOAD	vector	FADD/FSTORE	    13    0    1/4   SPECIAL
FXCH	reg8/reg16/reg32/reg64/reg80		MOV	single	FADD	    1    0    3/1   SPECIAL
FXCH	mem8/mem16/mem32/mem64/mem80		MOV	single	FADD	    1    0    3/1   SPECIAL


/* When processing measured benchmark instruction mixes, some instructions that appear in the mix do not exist */
/*   in the instruction table (above). They either do not appear at all or have different operands. */
/*	So, whenever I find a missing instruction, I add it here. */

STOS     none STS   vector  ALU       4    0    1/2   STORE-4
STOSB    none        STS     vector  ALU       4    0    1/2   STORE-4
STOSW    none       STS     vector  ALU       4    0    1/2   STORE-4
STOSD    none       STS     vector  ALU       4    0    1/2   STORE-4
STOSQ    none       STS     vector  ALU       4    0    1/2   STORE-4
MOVS     none   MOV     vector  ALU       5    0    1/3   STORE-5
MOVSB    none            MOV     vector  ALU       5    0    1/3   STORE-5
MOVSW    none           MOV     vector  ALU       5    0    1/3   STORE-5
MOVSD    none           MOV     vector  ALU       5    0    1/3   STORE-5
MOVSQ    none           MOV     vector  ALU       5    0    1/3   STORE-5
FNSTCW	none/mem8/mem16/mem32/mem64/mem80		STORE	vector	(FADD/FMUL)&FSTORE	    2    0    1/2   SPECIAL
FNSTSW	none/mem8/mem16/mem32/mem64/mem80		STORE	vector	(FADD/FMUL)&FSTORE	    9    0    1/9   SPECIAL
FNSTSW	reg8/reg16/reg32/reg64		STORE	vector	(FADD/FMUL)&FSTORE	    16    0    1/16   SPECIAL
FSTSW	reg8/reg16/reg32/reg64		STORE	vector	(FADD/FMUL)&FSTORE	    14    0    1/14   SPECIAL
FLDCW	none/mem8/mem16/mem32/mem64/mem80		LOAD	vector	(FADD/FMUL)&FSTORE	    14	 0    1/14   SPECIAL		    
MFENCE	none		MFENCE	vector	none	    33	 0    1/33   SPECIAL		    
SFENCE	none		MFENCE	vector	none	    33	 0    1/33   SPECIAL		    
EMMS	none		EMMS	vector	FADD/FMUL/FSTORE	    1	 0    3/1   SPECIAL		    

FSIN	none/mem80		FSIN	vector	FADD/FMUL	    51    0    1/51   SPECIAL
FCOS	none/mem80		FSIN	vector	FADD/FMUL	    90    0    1/90   SPECIAL
FSINCOS	none/mem80		FSIN	vector	FADD/FMUL	    125    0    1/125   SPECIAL
XADD	mem8/mem16/mem32/mem64,reg8/reg16/reg32/reg64		XCHADD	vector	ALU	    23    0    1/23   SPECIAL
XADD	reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64		XCHADD	vector	ALU	    3    0    1/1   SPECIAL
XCHG	mem8/mem16/mem32/mem64,reg8/reg16/reg32/reg64		XCHG	vector	ALU	    21    0    1/19   SPECIAL
XCHG	reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64		XCHG	vector	ALU	    1     0    1/1   SPECIAL
PREFETCHT0	mem8/mem16/mem32/mem64		PREFETCH	single	ALU	    1     0    1/1   SPECIAL
PREFETCHT1	mem8/mem16/mem32/mem64		PREFETCH	single	ALU	    1     0    1/1   SPECIAL
PREFETCHT2	mem8/mem16/mem32/mem64		PREFETCH	single	ALU	    1     0    1/1   SPECIAL
PREFETCHTA	mem8/mem16/mem32/mem64		PREFETCH	single	ALU	    1     0    1/1   SPECIAL
PREFETCHNTA	mem8/mem16/mem32/mem64/mem512		PREFETCH	single	ALU	    1     0    1/1   SPECIAL

FPREM	none		FPREM	single	FMUL	    7    0    1/7   SPECIAL

/* MORE MISSED INSTRUCTIONS */
FADD	none/mem16/mem32/mem64		ADD	single	FADD	    4    0    1/1   SPECIAL
FADD	none/reg8/reg16/reg32/reg64		ADD	single	FADD	    4    0    1/1   SPECIAL
FADDP	none/mem16/mem32/mem64		ADD	single	FADD	    4    0    1/1   SPECIAL
FADDP	none/reg8/reg16/reg32/reg64		ADD	single	FADD	    4    0    1/1   SPECIAL
FADDR	none/mem16/mem32/mem64		ADD	single	FADD	    4    0    1/1   SPECIAL
FADDR	none/reg8/reg16/reg32/reg64		ADD	single	FADD	    4    0    1/1   SPECIAL
FADDRP	none/mem16/mem32/mem64		ADD	single	FADD	    4    0    1/1   SPECIAL
FADDRP	none/reg8/reg16/reg32/reg64		ADD	single	FADD	    4    0    1/1   SPECIAL
FSUB	none/mem16/mem32/mem64		ADD	single	FADD	    4    0    1/1   SPECIAL
FSUB	none/reg8/reg16/reg32/reg64		ADD	single	FADD	    4    0    1/1   SPECIAL
FSUBP	none/mem16/mem32/mem64		ADD	single	FADD	    4    0    1/1   SPECIAL
FSUBP	none/reg8/reg16/reg32/reg64		ADD	single	FADD	    4    0    1/1   SPECIAL
FSUBR	none/mem16/mem32/mem64		ADD	single	FADD	    4    0    1/1   SPECIAL
FSUBR	none/reg8/reg16/reg32/reg64		ADD	single	FADD	    4    0    1/1   SPECIAL
FSUBRP	none/mem16/mem32/mem64		ADD	single	FADD	    4    0    1/1   SPECIAL
FSUBRP	none/reg8/reg16/reg32/reg64		ADD	single	FADD	    4    0    1/1   SPECIAL
FIADD	none/mem16/mem32/mem64		ADD	double	FADD&FSTORE	    4    0    1/4   SPECIAL
FISUB	none/mem16/mem32/mem64		ADD	double	FADD&FSTORE	    4    0    1/4   SPECIAL
FISUBR	none/mem16/mem32/mem64		ADD	double	FADD&FSTORE	    4    0    1/4   SPECIAL
FMUL	none/reg8/reg16/reg32/reg64		FMUL	single	FMUL	    4    0    1/1   SPECIAL
FMUL	mem16/mem32/mem64		FMUL	single	FMUL	    4    0    1/1   SPECIAL
FMULP	none/reg8/reg16/reg32/reg64		FMUL	single	FMUL	    4    0    1/1   SPECIAL
FMULP	mem16/mem32/mem64		FMUL	single	FMUL	    4    0    1/1   SPECIAL
FIMUL	none/mem16/mem32/mem64		FMUL	double	FADD&FSTORE	    4    0    1/4   SPECIAL
FDIV	none/reg8/reg16/reg32/reg64		FDIV	single	FMUL	    31    0    1/24   SPECIAL
FDIV	mem16/mem32/mem64		FDIV	single	FMUL	    31    0    1/24   SPECIAL
FDIVR	none/reg8/reg16/reg32/reg64		FDIV	single	FMUL	    31    0    1/24   SPECIAL
FDIVR	mem16/mem32/mem64		FDIV	single	FMUL	    31    0    1/24   SPECIAL
FDIVP	none/reg8/reg16/reg32/reg64		FDIV	single	FMUL	    31    0    1/24   SPECIAL
FDIVP	mem16/mem32/mem64		FDIV	single	FMUL	    31    0    1/24   SPECIAL
FDIVRP	none/reg8/reg16/reg32/reg64		FDIV	single	FMUL	    31    0    1/24   SPECIAL
FDIVRP	mem16/mem32/mem64		FDIV	single	FMUL	    31    0    1/24   SPECIAL
FIDIV	none/mem16/mem32/mem64		FDIV	double	FADD&FSTORE	    31    0    1/24   SPECIAL
FIDIVR	none/mem16/mem32/mem64		FDIV	double	FADD&FSTORE	    31    0    1/24   SPECIAL
FABS	none/mem16/mem32/mem64		FABS	single	FMUL	    2    0    1/2   SPECIAL
FCHS	none/mem16/mem32/mem64		FABS	single	FMUL	    2    0    1/2   SPECIAL
FCOM	none/mem16/mem32/mem64/reg16/reg32/reg64		FCOM	single	FADD	    4    0    1/1   SPECIAL
FCOMP	none/mem16/mem32/mem64/reg16/reg32/reg64		FCOM	single	FADD	    4    0    1/1   SPECIAL
FUCOM	none/mem16/mem32/mem64/reg16/reg32/reg64		FCOM	single	FADD	    4    0    1/1   SPECIAL
FUCOMP	none/mem16/mem32/mem64/reg16/reg32/reg64		FCOM	single	FADD	    4    0    1/1   SPECIAL
FCOMPP	none/mem16/mem32/mem64/reg16/reg32/reg64		FCOM	single	FADD	    4    0    1/1   SPECIAL
FUCOMPP	none/mem16/mem32/mem64/reg16/reg32/reg64		FCOM	single	FADD	    4    0    1/1   SPECIAL
FCOMI	none/mem16/mem32/mem64/reg16/reg32/reg64		FCOM	single	FADD	    4    0    1/1   SPECIAL
FCOMIP	none/mem16/mem32/mem64/reg16/reg32/reg64		FCOM	single	FADD	  4    0    1/1   SPECIAL
FUCOMIP	none/mem16/mem32/mem64/reg16/reg32/reg64		FCOM	single	FADD	  4    0    1/1   SPECIAL
FUCOMI	none/mem16/mem32/mem64/reg16/reg32/reg64		FCOM	single	FADD	    4    0    1/1   SPECIAL
FICOM	none/mem16/mem32/mem64		FCOM	double	FADD&FSTORE	    4    0    1/1   SPECIAL
FICOMP	none/mem16/mem32/mem64		FCOM	double	FADD&FSTORE	    4    0    1/1   SPECIAL
FTST	none/mem16/mem32/mem64/reg16/reg32/reg64		FTST	single	FADD	    4    0    1/1   SPECIAL
FXAM	none/mem16/mem32/mem64/reg16/reg32/reg64		FTST	double	FSTORE&ALU	    4    0    1/1   SPECIAL
FSTP	none/mem32/mem64/reg32/reg64		STORE	single	(FADD/FMUL)&FSTORE	    2    0    1/1   SPECIAL
FST	none/mem32/mem64/reg32/reg64		STORE	single	(FADD/FMUL)&FSTORE	    2    0    1/1   SPECIAL
FSTP	mem80		STORE	vector	(FADD/FMUL)&FSTORE	    8    0    1/7   SPECIAL
FBSTP	mem80		STORE	vector	(FADD/FMUL)&FSTORE	    167    0    1/163   SPECIAL
FLDZ	none/reg8/reg16/reg32/reg64		LOAD	single	FSTORE	    2    0    1/1   SPECIAL
FLD1	none/reg8/reg16/reg32/reg64		LOAD	single	FSTORE	    2    0    1/1   SPECIAL
FILD	none/mem16/mem32/mem64		LOAD	single	FSTORE	    6     0    1/1   SPECIAL
FLD	none/reg16/reg32/reg64		LOAD	single	FADD/FMUL/FSTORE	    2     0    2/1   SPECIAL
FLD	mem32/mem64		LOAD	single	FADD/FMUL/FSTORE	    4     0    2/1   SPECIAL
FLD	mem80		LOAD	vector	FADD/FMUL/FSTORE	    13     0    1/4   SPECIAL
FBLD	mem80		LOAD	vector	FADD/FMUL/FSTORE	    94     0    1/30   SPECIAL
FIST	none/mem32/mem64		LOAD	single	FSTORE	    4     0    1/1   SPECIAL
FISTP	none/mem32/mem64		LOAD	single	FSTORE	    4     0    1/1   SPECIAL


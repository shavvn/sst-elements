- Make memcpy and vector_add parameters
- Measure memcpy and vector_add inside allreduce
- genPatterns: tree_type not needed in XML file for alltoall
- Clean up CPUNICevents and state events. Get rid of redundant information and isolate. What about tag?
- Make NIC_model_t an iterator or something
- Clean up the core == rank ambiguity
- generate far links (Did this get lost when I got rid of V1?)
- Move as much latency onto the links as possible

- Come up with a unified strategy for debug and verbose

- Seperate out NIC model
    + DONE Send side is in pattern_common.cc
    + DONE Receive side is in comm_pattern.cc
    + DONE Should there be a queue in front of the receive side?
    + Make a NIC only read and store the NoC or Net params, depending on its function

- NoCIntraLatency cannot be less than NoCNICparams 0. Why? Same is true for NetIntraLatency

- NetIntraLatency Cannot be bigger than NetNICparams = 0. I don't think that is right.

- Fix msgrate_pattern Test 3 abort bug
- Allow machine to be bigger than job that we run on it
- Recreate and fix I/O and NVRAM infrastructure

- How to measure gap? Router latency? Link bandwidth?

- Rename Patterns object something like machine or arch
    Rexport its methods directly, instead of through more methods in comm_patterns.

- Create bit_bucket component
    DONE Initially, just a component to consume events
    Then act on reads, do the proper delays, and route acks back

- Flits in router

- Implement checkpointing
    - Coordinated
    - Uncoordinated with pessimistic msg logging
    - RAID

- More patterns
    - Master/Slave
    - Integer Sort (IS)

- Metrics
    - Decide on what metrics to collect
	- Power and temp for routers
	- Application run time
	- Storage size for logs and checkpoints

    - Collect metrics at end of simulation and print


DONE DONE DONE DONE DONE DONE DONE DONE DONE DONE DONE DONE DONE DONE DONE

- ghost_pattern
    DONE Create handlers for NETWORK, NoC, (and NVRAM, STORAGE)
    DONE Update routing algorithm

- genPatterns
    DONE If X * Y = 1, don't generate aggregator and links to it
    DONE if x * y = 1, don't generate NoC
    DONE Link between net aggregator and net router
    DONE Aggregators for NVRAMlocal and StableStorage
    DONE Select wormhole or flit-based for each router

- Router model needs to implement a getPower method
    Basically number of port accesses since last power query
    Introspector will call this periodically

- Power parameters in genPattern

- Multiple generators per router
    - Will messages between "cores" still go through router?
	For now, yes, but we make the links between routers
	and pattern generators much faster to emulate intra-node
	speeds....

- Somehow can't handle "rings" (one dim = 1). Why? Fix segfault!
    This was becasue SST sdl files don't like loops on components (I think)

- Get rid of pattern_event_t

- Is chckpt_size, envelope_size needed in Patterns::init?
    Maybe add envelope_size automatically to sends?

Arch model
    Torus network
    A node is an endpoint of the torus network
        One or more cores per chip (with NoC), possibly multiple chips (No for now)
    NoC is also a torus but flit based; i.e., more like a memory crossbar
    Cores have local memory that can be accessed remotely through the NoC
    Each core has a connection independent of the NoC to network router which is part of the Torus
        Should we allow more than one router per chip? (Probably not.)
        Should multiple chips be able to share a router? (No for now)
    Each core has a seperate connection to shared (among cores) local NVRAM
        Need a bitbucket component. How to handle completion of writes?
    Each core has a connection to stable storage (SSD or parallel FS)
        How to handle completion of writes?
        How many cores share a channel to this storage?

- Default paramaters
    Net BW 2.0 GB/s
    Net latency 4 us

    Node BW 10 GB/s
    Node latency 200 ns

- Get rid of envelope
- Clean up pattern_common.cc
- Bring sst_gen_v2.c and main_v2.c back up to date
- Get rid of bandwidth for params in machine file
- pattern file with pattern specific parameters
- Use NetIntraLatency and NoCIntraLatency as part of router calc
- Enter inflection points for NoCNICparams
- Make NICstat selectable from configuration
- Find a way to cleanly seperate pattern-specifc parameters and
    the general ones, like size of torus
- How to make it easy to add pattern-specific parameters in genPatterns
- Figure out where delays need to be computed
    e.g., where do latencies occur? Calculations? XML file?
    where does bandwidth come into play?
- Fix memory leak
- Clean up and improve the message passing model
    - Use (some) LoGP parameters in the config file
    - Figure out what we want to be able to set (and what we cannot, given the model)
    - Hockney and more elaborate models
    - send_msg() can be called over and over
	It's like an Isend() with infinite buffer space.
	Should we have a regular send? How would I do that?
	How can pattern's confirm a message has gone out?

- Figure out where delays need to be computed
    Does 150ns in xml file translate to 150?
    Access to storage: incur latency only once, or split it

- Set allreduce_msglen in allreduce_op through set_Idata, and then add a parameter to allreduce_pattern
- Right now allreduce takes message length as an initialization
    parameter from the calling module. It might be nicer to have the
    calling module just pass in the configuration file parameter
    list, and let allreduce pull out the parameters it wants.
    That would reduce the amount of code duplication in calling
    modules, make input file processing a little bit more expensive,
    and may another mechanism to set the message length from the
    calling module, if it wants to set it.

- Fix reading of NIC latency param on 32-bit systems

- Make ghost_pattern.cc code more modular to make it easier to expand

- More patterns
    - FFT

- genPattern: pattern.c add rank_stride and start_rank for msgrate_pattern

- Serialization is broken big time...

- Try to switch to the new xml format again

- Play with component weight

- Fix calculations of myNetX etc for Z or z > 1

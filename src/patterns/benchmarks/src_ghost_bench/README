INTRODUCTION
    The ghost cell benchmark is a communication benchmark written
    with these three main goals in mind:

    - Mimic applications that perform iterative stencil computations

    - Work well within the limited memory resources of a simulator

    - Allow for testing and measurements of advanced network
	architectural features

    Iterative Stencil Computation
	Many parallel scientific applications perform stencil
	operations on large matrices or data arranged inside
	a three-dimensional cube. The stencils determine which
	neighboring data has impact on the data element currently
	being computed. For data arranged in a two-dimensional
	array, a five-point stencil is common. In order to update
	a data element, the values of the elements to the North,
	South, East, and West must be known. Similarly, seven-point
	stencils are common for three-dimensional data.  These kind
	of applications iterate over updating each data element
	until a solution has become precise enough, or a certain
	number of time steps have elapsed.

	Parallel application consisting of multiple MPI ranks divide
	the available data such that each rank has about the same
	amount of work to perform. That means ranks must exchange
	information with their neighbors when the update of a data
	element requires the values of elements that reside in the
	memory of another rank.  To make this information exchange
	efficient, ghost cells are used.

	...

	Ghost benchmark mimics this behavior.

    Limit Memory Usage
	Only memory "around the edges" of the total area assigned to
	each MPI rank is actually allocated.

    Communication
	Full/empy bit pipelining

GHOST BENCHMARK USAGE
    Compiling

    Running Ghost

GHOST BENCHMARK OUTPUT
    Explanation of Output

    Examples
    Performance
    Memory Usage
    Scaling
    Repeatability




NOTES

Weak scaling
    Could be used in strong scaling node, but each run would have to use
    pre-calculated parameters to keep overall volume of data constant
